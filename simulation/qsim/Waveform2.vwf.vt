// Copyright (C) 2017  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "06/04/2019 20:45:17"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          ControlUnit
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module ControlUnit_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [5:0] OpCode;
reg [5:0] funct;
reg nhalt;
// wires                                               
wire [4:0] ALUOp;
wire ALUSrc;
wire Branch;
wire Jump;
wire JumpR;
wire MemOp;
wire [1:0] MemToReg;
wire OpIO;
wire [1:0] RegDst;
wire RegWrite;
wire halt;
wire inputInst;
wire outputInst;

// assign statements (if any)                          
ControlUnit i1 (
// port map - connection between master ports and signals/registers   
	.ALUOp(ALUOp),
	.ALUSrc(ALUSrc),
	.Branch(Branch),
	.Jump(Jump),
	.JumpR(JumpR),
	.MemOp(MemOp),
	.MemToReg(MemToReg),
	.OpCode(OpCode),
	.OpIO(OpIO),
	.RegDst(RegDst),
	.RegWrite(RegWrite),
	.funct(funct),
	.halt(halt),
	.inputInst(inputInst),
	.nhalt(nhalt),
	.outputInst(outputInst)
);
initial 
begin 
#1000000 $finish;
end 
// OpCode[ 5 ]
initial
begin
	OpCode[5] = 1'b0;
end 
// OpCode[ 4 ]
initial
begin
	OpCode[4] = 1'b1;
end 
// OpCode[ 3 ]
initial
begin
	OpCode[3] = 1'b0;
end 
// OpCode[ 2 ]
initial
begin
	OpCode[2] = 1'b1;
end 
// OpCode[ 1 ]
initial
begin
	OpCode[1] = 1'b0;
end 
// OpCode[ 0 ]
initial
begin
	OpCode[0] = 1'b0;
end 
// funct[ 5 ]
initial
begin
	funct[5] = 1'b0;
end 
// funct[ 4 ]
initial
begin
	funct[4] = 1'b0;
end 
// funct[ 3 ]
initial
begin
	funct[3] = 1'b0;
end 
// funct[ 2 ]
initial
begin
	funct[2] = 1'b0;
end 
// funct[ 1 ]
initial
begin
	funct[1] = 1'b0;
end 
// funct[ 0 ]
initial
begin
	funct[0] = 1'b0;
end 

// nhalt
initial
begin
	nhalt = 1'b1;
end 
endmodule

