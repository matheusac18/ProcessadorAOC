// Copyright (C) 2017  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "06/11/2019 22:51:47"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          CPU
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module CPU_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg [21:0] inputs;
reg nhalt;
reg reset;
// wires                                               
wire [6:0] cent_milhar7;
wire [6:0] centena7;
wire [6:0] dez_milhao7;
wire [6:0] dez_milhar7;
wire [6:0] dezena7;
wire inputInst;
wire neg;
wire outputInst;
wire [31:0] pc_out;
wire [6:0] und_milhao7;
wire [6:0] und_milhar7;
wire [6:0] unidade7;

// assign statements (if any)                          
CPU i1 (
// port map - connection between master ports and signals/registers   
	.cent_milhar7(cent_milhar7),
	.centena7(centena7),
	.clk(clk),
	.dez_milhao7(dez_milhao7),
	.dez_milhar7(dez_milhar7),
	.dezena7(dezena7),
	.inputInst(inputInst),
	.inputs(inputs),
	.neg(neg),
	.nhalt(nhalt),
	.outputInst(outputInst),
	.pc_out(pc_out),
	.reset(reset),
	.und_milhao7(und_milhao7),
	.und_milhar7(und_milhar7),
	.unidade7(unidade7)
);
initial 
begin 
#1000000 $finish;
end 

// clk
always
begin
	clk = 1'b0;
	clk = #5000 1'b1;
	#5000;
end 

// inputs[21]
initial
begin
	inputs[21] = 1'b0;
end 

// inputs[20]
initial
begin
	inputs[20] = 1'b0;
end 

// inputs[19]
initial
begin
	inputs[19] = 1'b0;
end 

// inputs[18]
initial
begin
	inputs[18] = 1'b0;
end 

// inputs[17]
initial
begin
	inputs[17] = 1'b0;
end 

// inputs[16]
initial
begin
	inputs[16] = 1'b0;
end 

// inputs[15]
initial
begin
	inputs[15] = 1'b0;
end 

// inputs[14]
initial
begin
	inputs[14] = 1'b0;
end 

// inputs[13]
initial
begin
	inputs[13] = 1'b0;
end 

// inputs[12]
initial
begin
	inputs[12] = 1'b0;
end 

// inputs[11]
initial
begin
	inputs[11] = 1'b0;
end 

// inputs[10]
initial
begin
	inputs[10] = 1'b0;
end 

// inputs[9]
initial
begin
	inputs[9] = 1'b0;
end 

// inputs[8]
initial
begin
	inputs[8] = 1'b0;
end 

// inputs[7]
initial
begin
	inputs[7] = 1'b0;
end 

// inputs[6]
initial
begin
	inputs[6] = 1'b0;
end 

// inputs[5]
initial
begin
	inputs[5] = 1'b1;
end 

// inputs[4]
initial
begin
	inputs[4] = 1'b1;
end 

// inputs[3]
initial
begin
	inputs[3] = 1'b0;
end 

// inputs[2]
initial
begin
	inputs[2] = 1'b0;
end 

// inputs[1]
initial
begin
	inputs[1] = 1'b0;
end 

// inputs[0]
initial
begin
	inputs[0] = 1'b0;
end 

// nhalt
initial
begin
	nhalt = 1'b0;
	nhalt = #30000 1'b1;
	nhalt = #40000 1'b0;
end 

// reset
initial
begin
	reset = 1'b0;
end 
endmodule

